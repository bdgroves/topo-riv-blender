# Render Parameters File
module_name = "blender_parameters.blender_params_aerial"

# Import parameters file
import os, sys, importlib
render_params = module_name.replace(".", os.sep) + ".py"
parameters = importlib.import_module(module_name)

# Define the final output
rule all:
    input:
        "phase_2_visualize/out/render_kingspeak.png"

# Make the bounding box
rule make_bounding_box:
    params:
        UL_corner = [41.75, -111.5],
        LR_corner = [39.25, -109.0],
    output:
        extent_shpfile = "phase_0_fetch/out/{name}/extent.shp"
    script:
        "phase_0_fetch/src/make_bounding_box.py"

# Downloads a digital elevation model within extent 
rule download_dem:
    params:
        dem_product = parameters.dem_product,
        render_pixels = parameters.res_x * parameters.res_y,
        buffer = parameters.buffer
    input:
        extent_shpfile = "phase_0_fetch/out/{name}/extent.shp"
    output:
        demfile = "phase_0_fetch/out/{name}/dem.tif"
    script:
        "phase_0_fetch/src/download_dem.py"

# Downloads aerial imagery within extent
target_asset_keys = ["sur_refl_b01", "sur_refl_b04", "sur_refl_b03"]
rule download_aerial:
    params:
        collection_id = "modis-09A1-061",
        target_asset_keys = target_asset_keys,
        start_query="2024-05-01T14:00:00Z",
        end_query="2024-05-30T20:00:00Z",
    input:
        extent_shpfile =  "phase_0_fetch/out/{name}/extent.shp"
    output:
        out_bands = ["phase_0_fetch/out/{name}/" + band + ".tif" for band in target_asset_keys]
    script:
        "phase_0_fetch/src/get_imagery.py"

# sharpen
rule sharpen:
    params:
        upsample = 2,
        method = 'cubic'
    input:
        input_bands = ["phase_0_fetch/out/{name}/" + band + ".tif" for band in target_asset_keys]
    output:
        output_bands = ["phase_0_fetch/out/{name}/" + band + "_sharp.tif" for band in target_asset_keys]
    script:
        "phase_1_process/src/upsample.py"

# Downloads NHD flowline data within extent
rule get_nhd_fl:
    params:
        nhd_type = parameters.nhd_flowline,
        render_pixels = parameters.res_x * parameters.res_y
    input:
        extent_shpfile = "phase_0_fetch/out/{name}/extent.shp"
    output:
        nhd_shpfile = "phase_0_fetch/out/{name}/rivers.shp"
    script:
        "phase_0_fetch/src/get_nhd.py"

# Downloads NHD waterbody data within extent
rule get_nhd_wb:
    params:
        nhd_type = parameters.nhd_waterbody,
        render_pixels = parameters.res_x * parameters.res_y 
    input:
        extent_shpfile =  "phase_0_fetch/out/{name}/extent.shp"
    output:
        nhd_shpfile = "phase_0_fetch/out/{name}/waterbody.shp"
    script:
        "phase_0_fetch/src/get_nhd.py"

# filter out small streams in nhd data
rule filter_streams:
    params:
        min_stream_order = 4 #lambda wildcards: min_stream_orders[wildcards.name]
    input:
        nhd_shpfile = "phase_0_fetch/out/{name}/rivers.shp"
    output:
        filtered_nhd_shpfile = "phase_0_fetch/out/{name}/filtered_rivers.shp"
    script:
        "phase_1_process/src/filter_streams.py"

# Creates a grayscale height map and texture map for Blender to render.
# The height map is used to determine how high the landscape should be 
# in the render, and the texture map determines the color of the landscape.
rule create_heightmap_texturemap:
    params:
        map_crs = "EPSG:3857",
        buffer = parameters.buffer,
        wall_thickness = 1.5,
        wall_color = [0.2, 0.133, 0.067, 1.0],
        background_color = [0.5, 0.5, 0.5, 1.0]
    input:
        extent_shpfile =  "phase_0_fetch/out/{name}/extent.shp",
        demfile =  "phase_0_fetch/out/{name}/dem.tif",
        aerialfiles =  ["phase_0_fetch/out/{name}/" + band + "_sharp.tif" for band in target_asset_keys],
        flowlines_shpfile = "phase_0_fetch/out/{name}/filtered_rivers.shp",
        waterbody_shpfile = "phase_0_fetch/out/{name}/waterbody.shp"
    output:
        dimensions_file = "phase_1_process/out/{name}/dimensions.npy",
        heightmap_file = "phase_1_process/out/{name}/heightmap.png",
        texturemap_file = "phase_1_process/out/{name}/texturemap.png",
        apronmap_file = "phase_1_process/out/{name}/apronmap.png"
    script:
        "phase_1_process/src/process.py"

# Using the height map and texture map, Blender sets up the scene 
# (topography, lighting, and camera) and renders a photorealistic image. 
rule render:
    input:
        dimensions_file = "phase_1_process/out/{name}/dimensions.npy",
        heightmap_file = "phase_1_process/out/{name}/heightmap.png",
        texturemap_file = "phase_1_process/out/{name}/texturemap.png",
        apronmap_file = "phase_1_process/out/{name}/apronmap.png",
        blender_params = render_params
    output:
        output_file = "phase_2_visualize/out/render_{name}.png"
    shell:
        "Blender -b -P phase_2_visualize/src/render.py -- "
        "{input.blender_params} "
        "{input.dimensions_file} {input.heightmap_file} {input.texturemap_file} {input.apronmap_file} NULL "
        "{output.output_file} "